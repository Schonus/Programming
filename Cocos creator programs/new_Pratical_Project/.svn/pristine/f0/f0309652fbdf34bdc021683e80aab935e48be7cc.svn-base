"use strict";
cc._RF.push(module, '68b8bWeh6hKN7B/9QkAAK7e', 'PlayerControl');
// resources/script/PlayerControl.ts

"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
var PlayerControl = /** @class */ (function (_super) {
    __extends(PlayerControl, _super);
    function PlayerControl() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        //定义飞机速度
        _this.speedX = 0;
        _this.speedY = 0;
        //加载子弹控件
        _this.PreBullet = null;
        return _this;
    }
    PlayerControl.prototype.onLoad = function () {
        var self = this;
        //————————————————————飞机移动部分——————————————————————
        // 设定移动和静止函数操作，习惯把实现函数写在外面
        //飞机移动
        var func1 = function (event) {
            // 判断输入的是哪个键
            switch (event.keyCode) {
                case 37: //左键
                case 65: //a
                    self.speedX = -200;
                    break;
                case 39: //右键
                case 68: //d
                    self.speedX = 200;
                    break;
                case 38: //上键
                case 87: //w
                    self.speedY = +200;
                    break;
                case 40: //下键
                case 83: //s
                    self.speedY = -200;
                    break;
                default:
                    break;
            }
        };
        //飞机停止
        var func2 = function (event) {
            // 判断输入的是哪个键
            switch (event.keyCode) {
                case 37: //左键
                case 65: //a
                    if (self.speedX < 0) {
                        self.speedX = 0;
                    }
                    break;
                case 39: //右键
                case 68: //d
                    if (self.speedX > 0) {
                        self.speedX = 0;
                    }
                    break;
                case 38: //上键
                case 87: //w
                    if (self.speedY > 0) {
                        self.speedY = 0;
                    }
                    break;
                case 40: //下键
                case 83: //s
                    if (self.speedY < 0) {
                        self.speedY = 0;
                    }
                    break;
                default:
                    break;
            }
        };
        //键盘监听函数
        cc.systemEvent.on(cc.SystemEvent.EventType.KEY_DOWN, func1);
        cc.systemEvent.on(cc.SystemEvent.EventType.KEY_UP, func2);
        //玩家攻击
        // 外面定义函数
        var func3 = function (event) {
            var bullet = cc.instantiate(self.PreBullet);
            //为什么这里会出null
            if (bullet != null) {
                bullet.setParent(cc.find("Canvas/Main Camera"));
                bullet.x = this.node.x;
                bullet.y = this.node.y;
            }
        };
        //定义函数
        this.schedule(func3, 0.5);
    };
    PlayerControl.prototype.start = function () {
        //————————————————————飞机碰撞箱部分————————————————————
        cc.director.getCollisionManager().enabled = true;
    };
    //产生碰撞
    PlayerControl.prototype.onCollisionEnter = function (other) {
    };
    PlayerControl.prototype.update = function (dt) {
        //玩家移动
        //边框判定和实现X、Y轴位移
        if (((this.node.x >= -190) && (this.speedX < 0)) || ((this.node.x <= 190) && (this.speedX > 0))) {
            this.node.x += this.speedX * dt;
        }
        //Y轴与X轴同理
        if (((this.node.y >= -364) && (this.speedY < 0)) || ((this.node.y <= 364) && (this.speedY > 0))) {
            this.node.y += this.speedY * dt;
        }
    };
    PlayerControl.prototype.onDestroy = function () {
        //这里可能有问题
        cc.systemEvent.off(cc.SystemEvent.EventType.KEY_DOWN);
        cc.systemEvent.off(cc.SystemEvent.EventType.KEY_UP);
    };
    __decorate([
        property
    ], PlayerControl.prototype, "speedX", void 0);
    __decorate([
        property(cc.Prefab)
    ], PlayerControl.prototype, "PreBullet", void 0);
    PlayerControl = __decorate([
        ccclass
    ], PlayerControl);
    return PlayerControl;
}(cc.Component));
exports.default = PlayerControl;

cc._RF.pop();